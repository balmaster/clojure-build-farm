cmdhistory=["(common/get-basedir)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\common.clj" "(common/get-basedir)" "(server.common/get-basedir)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\common.clj" "(server.common/get-basedir)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\common.clj" "(server.common/get-basedir)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(defrecord Test [f1 f2 f3])" "(into (Test. nil) {\:f3 \\"f3\\"})" "(into (Test. nil) {\:f3 \\"f3\\" \:f1 \\"f1\\" \:f2 \\"f2\\"})" "(into (Test. nil) {\:f1 \\"f1\\" \:f2 \\"f2\\" \:f3 \\"f3\\"})" "(Test. nil)" "(merge (Test. {}) {\:f1 \\"f1\\" \:f2 \\"f2\\" \:f3 \\"f3\\"})" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(server.distributive/load nil nil)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(server.distributive/load-distribute nil nil)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(server.distributive/load-distribute nil nil)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(server.distributive/load-distribute nil nil)" "(defrecord Test [x y])" "(record Test \:x 1 \:y 2)" "(defstruct Test \:x \:y)" "(defstruct Test1 \:x \:y)" "(struct-map Test1 \:x 1 \:y 2)" "(struct-map Test1 \:y 2)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(server.distributive/load-deploy nil nil)" "(server.distributive/get-servers (server.distributive/load-deploy nil nil))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(server.distributive/get-servers (server.distributive/load-deploy nil nil))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(server.distributive/get-servers (server.distributive/load-deploy nil nil))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(server.distributive/get-servers (server.distributive/load-deploy nil nil))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(server.distributive/get-servers (server.distributive/load-deploy nil nil))" "(get  [\:test {\:name \\"test\\"}] 0)" "(get  [\:test {\:name \\"test\\"}] 1    )" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(server.distributive/get-servers (server.distributive/load-deploy nil nil))" "(server.distributive/get-server-list (server.distributive/load-deploy nil nil))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(server.distributive/get-server-list (server.distributive/load-deploy nil nil))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(server.distributive/get-server-list (server.distributive/load-deploy nil nil))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(server.distributive/get-server (server.distributive/load-deploy nil nil) \\"test\\")" "(server.distributive/get-server (server.distributive/load-deploy nil nil) \:test)" "(server.distributive/get-server (server.distributive/load-deploy nil nil) \\"test\\")" "(server.distributive/get-server (server.distributive/load-deploy nil nil) \\"test1\\")" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(server.distributive/load-deploy-file \\"Distribute/A/deploy.xml\\")" "(server.distributive/load-deploy-file nil \\"Distribute/A/deploy.xml\\")" "(server.distributive/load-deploy-file nil \\"Distribute/A/deploy.xml1\\n\\")" "(server.distributive/load-deploy-file nil \\"Distribute/A/deploy.xml\\")" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(require [clojure.xml \:as xml])" "(require '[clojure.xml \:as xml])" "(require '[clojure.zip \:as zip])" "(def x\\n  (zip/zip-xml\\n    (xml/parse \\"<r><t a\='1'/></r>\\")))" "(def x\\n  (zip/xml-zip\\n    (xml/parse \\"<r><t a\='1'/></r>\\")))" "(def x\\n  (zip/xml-zip\\n    (xml/parse \\n      (java.io.ByteArrayInputStream. \\n        (.getBytes \\"<r><t a\='1'/></r>\\")))))" "(zip/down x)" "(zip/down \\n  (zip/down x))" "(zip/down \\n  (zip/left x))" "(zip/left x)" "(print x)" "(print (zip/down x))" "(xml-> r t)" "(xml-> \:r)" "(\:require clojure.contrib.zip-filter)" "(require '[clojure.contrib.zip-filter \:as f])" "(require '[clojure.data.zip.xml \:as dzx])" "(require '[data.zip.xml \:as dzx])" "(require '[clojure.data.zip.xml \:as dzx])" "(require '[clojure.zip \:as zip])" "(require '[clojure.xml \:as xml])" "(def x\\n  (zip/xml-zip\\n    (xml/parse \\n      (java.io.ByteArrayInputStream. \\n        (.getBytes \\"<r><t a\='1'/></r>\\")))))" "(xml-> x r)" "(dxz/xml-> x r)" "(dzx/xml-> x r)" "(dzx/xml-> x \:r)" "(dzx/xml-> x \\"r\\")" "x" "(dzx/xml-> x \:r)" "(dzx/xml-> x \:t)" "(def x\\n  (zip/xml-zip\\n    (xml/parse \\n      (java.io.ByteArrayInputStream. \\n        (.getBytes \\"<r><t a\='1'/><t b\=''></r>\\")))))" "(undef x)" "(unset x)" "(def x1\\n  (zip/xml-zip\\n    (xml/parse \\n      (java.io.ByteArrayInputStream. \\n        (.getBytes \\"<r><t a\='1'/><t b\=''></r>\\")))))" "(def x1\\n  (zip/xml-zip\\n    (xml/parse \\n      (java.io.ByteArrayInputStream. \\n        (.getBytes \\"<r><t a\='1'/><t b\=''/></r>\\")))))" "(dzx/xml-> x \:t)" "(dzx/xml-> x \:t (attr \:a))" "(dzx/xml-> x \:t (dzx/attr \:a))" "(dzx/xml-> x \:t )" "(dzx/xml-> x (node\= \:t) )" "(dzx/xml-> x (dzx/node\= \:t) )" "(dzx/xml-> x (dzx/tag\= \:t) )" "(dzx/xml-> x \\n           (and\\n             (dzx/tag\= \:t)\\n             (dzx/attr\= \:a)))" "(dzx/xml-> x \\n           (and\\n             (dzx/tag\= \:t)\\n             (dzx/attr \:a)))" "(dzx/xml-> x \\n           (and\\n             (dzx/tag\= \:t)\\n             (dzx/attr\= \:a 1)))" "(dzx/xml-> x \\n           (and\\n             (dzx/tag\= \:t)\\n             (dzx/attr\= \:a \\"1\\")))" "(dzx/xml-> x \:t)" "(dzx/xml-> x \:t [(attr\= \:a \\"1\\")])" "(dzx/xml-> x \:t [(dzx/attr\= \:a \\"1\\")])" "(dzx/xml-> x \:t [(dzx/attr \:a)])" "(dzx/xml-> x \:t [(dzx/attr \:b)])" "(dzx/xml-> x \:t [(dzx/attr \:a)])" "(dzx/xml-> x \:t )" "(dzx/xml-> x1 \:t )" "(dzx/xml-> x1 \:t [(dzx/attr \:b)] )" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(help zap)" "(src\\n  zap)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(server.distributive/load-deploy-file nil \\"Distribute/A/deploy.xml\\")" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(print 1)" "(print \\"1\\")" "(map print [1 2 3])" "(map print '(\\"1\\" \\"2\\" \\"3\\"))" "(map print (\\"1\\" \\"2\\" \\"3\\"))" "(map print '(\\"1\\" \\"2\\" \\"3\\"))" "(map inc [ 1 2 3 ])" "(map (fn[x](x)) [ 1 2 3])" "(map (fn[x](print x)) [ 1 2 3])" "(map (fn[x](inc x)) [ 1 2 3])" "(map (fn[x](get x \:name)) '({\:name \\"1\\"}))" "(map (fn[x](get x \:name)) '({\:name \\"1\\"} {\:name \\"2\\"}))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(server.distributive/named-list-to-map '({\:name \\"1\\"} {\:name \\"2\\"}))" "(get (server.distributive/named-list-to-map '({\:name \\"1\\"} {\:name \\"2\\"})) \\"2\\")" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "\\n(server.distributive/named-list-to-map '({\:name \\"1\\"} {\:name \\"2\\"}))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "\\n(server.distributive/named-list-to-map '({\:name \\"1\\"} {\:name \\"2\\"}))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "\\n(server.distributive/named-list-to-map '({\:name \\"1\\"} {\:name \\"2\\"}))" "\\n(server.distributive/named-list-to-map '({\:name \\"1\\" \:t 2} {\:name \\"2\\" \:t 1}))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "\\n(server.distributive/named-list-to-map '({\:name \\"1\\" \:t 2} {\:name \\"2\\" \:t 1}))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "\\n(server.distributive/named-list-to-map '({\:name \\"1\\" \:t 2} {\:name \\"2\\" \:t 1}))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "\\n(server.distributive/named-list-to-map '({\:name \\"1\\" \:t 2} {\:name \\"2\\" \:t 1}))" "(server.distributive/load-deploy-file nil \\"Distribute/A/deploy.xml\\")" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(server.distributive/load-deploy-file nil \\"Distribute/A/deploy.xml\\")" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(ns server.distributive\\r\\n  (use [clojure.data.zip.xml] )\\r\\n  (require [clojure.xml \:as xml]\\r\\n           [clojure.zip \:as zip]))" "(def z \\r\\n        (zip/xml-zip \\r\\n          (xml/parse \\r\\n            (java.io.File. file))))" "(def z \\r\\n        (zip/xml-zip \\r\\n          (xml/parse \\r\\n            (java.io.File. \\"distribute/A/deploy.xml\\"))))" "(xml-> z \:servers)" "(xml-> z \:services)" "(xml-> z \:services \:service)" "(ns server.distributive\\r\\n  (use [clojure.data.zip.xml] )\\r\\n  (require [clojure.xml \:as xml]\\r\\n           [clojure.zip \:as zip]))" "(def z (zip/xml-zip \\r\\n          (xml/parse \\r\\n            (java.io.File. \\"distribute/A/deploy.xml\\"))))" "(xml-> z \:services \:service)" "(ns server.distributive\\r\\n  (use [clojure.data.zip.xml] )\\r\\n  (require [clojure.xml \:as xml]\\r\\n           [clojure.zip \:as zip]))" "(java.io.File. \\"distribute/A/deploy.xml\\")" "(ns server.distributive\\r\\n  (use [clojure.data.zip.xml] )\\r\\n  (require [clojure.xml \:as xml]\\r\\n           [clojure.zip \:as zip]))" "(java.io.File. \\"distribute/A/deploy.xml\\")" "(def x (zip/xml-zip \\r\\n          (xml/parse \\r\\n            (java.io.File. file))))" "(def x (zip/xml-zip \\r\\n          (xml/parse \\r\\n            (java.io.File. \\"distribute/A/deploy.xml\\"))))" "(xml-> x \:servers \:server [(attr\= \:name \\"cdp-bolapp-sms\\")])" "(xml-> x \:service \:server \:component)" "(xml-> x \:service \:server )" "(xml-> x \:services \:service \:server )" "(xml-> x \:services )" "(take 5 (xml-> x \:services \:service))" "(take 1\\n      (xml-> x \:services \:service))" "(count\\n      (xml-> x \:services \:service))" "(count\\n      (xml-> x \:services \:service \:component))" "(take 1\\n      (xml-> x \:services \:service))" "(take 1\\n      (xml-> x \:services ))" "(count\\n      (xml-> x \:services ))" "(count\\n      (xml-> x \:servers))" "(count\\n      (xml-> x \:servers \:server))" "(xml/path\\n      (xml-> x \:servers \:server))" "(zip/path\\n      (xml-> x \:servers \:server))" "(count\\n  (take 2\\n      (xml-> x \:servers \:server)))" "(count\\n  (take 2\\n      (xml-> x \:servers \:server (attr \:name))))" "(take 2 (xml-> x \:servers \:server (attr \:name)))" "(take 12 (xml-> x \:servers \:server (attr \:name)))" "(count (xml-> x \:services \:service ))" "(count (xml-> x \:services \:service \:server))" "(count (xml-> x \:services \:service \:server \:component))" "(map\\n  (fn[x] (\:name x))\\n  (count (xml-> x \:services \:service \:server \:component)))" "(map\\n  (fn[x] (\:name x))\\n  (xml-> x \:services \:service \:server \:component))" "(map\\n  (fn[x] (get x \:groupId))\\n  (xml-> x \:services \:service \:server \:component))" "(map\\n  (fn[x] (get x \:ref))\\n  (xml-> x \:services \:service \:server))" "(map\\n  (fn[x] (get x \:tag))\\n  (xml-> x \:services \:service \:server))" "(map\\n  (fn[x] get x \:tag)\\n  (xml-> x \:services \:service \:server))" "(map\\n  (fn[x] get x \:name)\\n  (xml-> x \:services \:service \:server))" "(map\\n  (fn [x] (get x \:name))\\n  (xml-> x \:services \:service \:server))" "(map\\n  (fn [x] ( x ))\\n  (xml-> x \:services \:service \:server))" "(map\\n  (fn [x] x )\\n  (xml-> x \:services \:service \:server))" "(take 1 (map\\n  (fn [x] x )\\n  (xml-> x \:services \:service \:server)))" "(take 1 (map\\n  (fn [x] (get x \:attrs) )\\n  (xml-> x \:services \:service \:server)))" "(take 1 (map\\n  (fn [x] (do (print x)(get x \:attrs)) )\\n  (xml-> x \:services \:service \:server)))" "(count (take 1 (map\\n  (fn [x] (do (print x)(get x \:attrs)) )\\n  (xml-> x \:services \:service \:server))))" "(count (take 1 (map\\n  (fn [x] (do (get x 0)) )\\n  (xml-> x \:services \:service \:server))))" "(take 1 (map\\n  (fn [x] (do (get x 0)) )\\n  (xml-> x \:services \:service \:server)))" "(take 1 (map\\n  (fn [x] (do (get x 1)) )\\n  (xml-> x \:services \:service \:server)))" "(take 10 (map\\n  (fn [x] (do (get x 0)) )\\n  (xml-> x \:services \:service \:server)))" "(take 10 (map\\n  (fn [x] (do (get x 0)) )\\n  (xml-> x \:services \:service \:server \:component)))" "(take 10 (map\\n  (fn [x] (do (get x 2)) )\\n  (xml-> x \:services \:service \:server)))" "(take 10 (map\\n  (fn [x] (\:attrs (get x 0)) )\\n  (xml-> x \:services \:service \:server)))" "(take 10 (map\\n  (xml-> x \:services \:service \:server \:attrs)))" "(take 10 (map\\n  (xml-> x \:services \:service \:server (get \:attrs))))" "(take 10 (map\\n  (xml-> x \:services \:service \:server (fn[x] (get x 0)))))" "(take 10 (map\\n  (xml-> x \:services \:service \:server text)))" "(take 10 \\n  (xml-> x \:services \:service \:server text))" "(take 10 \\n  (xml-> x \:services \:service \:server (get 0)))" "(take 10 \\n  (xml-> x \:services \:service \:server (fn[x] (get x 0))))" "(take 10 \\n  (xml-> x \:services \:service \:server (fn[x] (\:attrs (get x 0)))))" "(take 10 \\n  (xml-> x \:services \:service (tag server)))" "(take 10 \\n  (xml-> x \:services \:service \:server (fn[x] (\:attrs (get x 0)))))" "(ns server.distributive\\r\\n  (use [clojure.data.zip.xml] )\\r\\n  (require [clojure.xml \:as xml]\\r\\n           [clojure.zip \:as zip]))" "(def z (zip/xml-zip \\r\\n          (xml/parse \\r\\n            (java.io.File. \\"distribute/A/deploy.xml\\"))))" "(take 10 \\n  (xml-> x \:services \:service \:server zip/node))" "(take 10 \\n  (xml-> z \:services \:service \:server zip/node))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(server.distributive/load-deploy-file nil \\"distribute/A/deploy.xml\\")" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(server.distributive/load-deploy-file nil \\"distribute/A/deploy.xml\\")" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(server.distributive/load-deploy-file nil \\"distribute/A/deploy.xml\\")" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(server.distributive/load-deploy-file nil \\"distribute/A/deploy.xml\\")" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(clojure.core/in-ns 'test.server.distributive)\\n(ns test.server.distributive \\n  (use [server.distributive]\\n       [clojure.test]\\n       [clojure.data.zip.xml]))\\n(clojure.core/in-ns 'server.distributive)" "(clojure.core/in-ns 'test.server.distributive)\\nnull\\n(clojure.core/in-ns 'server.distributive)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test.server.distributive/test-loc-to-instance)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test.server.distributive/test-loc-to-instance)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test.server.distributive/test-loc-to-instance)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test.server.distributive/test-loc-to-instance)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test.server.distributive/test-loc-to-instance)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test.server.distributive/test-loc-to-instance)" "(count\\r\\n                     (xml-> data1 \:servers \:app_server \:domain \:instance))" "(count (xml-> data1 \:servers \:app_server \:domain \:instance))" "(count (xml-> test.server.distribute/data1 \:servers \:app_server \:domain \:instance))" "(count (xml-> test.server.distributive/data1 \:servers \:app_server \:domain \:instance))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(count (xml-> test.server.distributive/data1 \:servers))" "(count (xml-> test.server.distributive/data1 \:servers \:app_server))" "(count (xml-> test.server.distributive/data1 \:servers \:server \:app_server))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test.server.distributive/test-loc-to-instance)" "(is (\= \\r\\n                 (count\\r\\n                     (xml-> test.server.distributive/data1 \:servers \:server \:app_server \:domain \:instance))\\r\\n                 2))" "(clojure.core/in-ns 'test.server.distributive)\\n(deftest test-loc-to-instance\\n  (testing \\"instance reading\\"\\n           (is (\= \\n                 (count\\n                     (xml-> data1 \:servers \:server \:app_server \:domain \:instance))\\n                 2))))\\n(clojure.core/in-ns 'server.distributive)" ";; Switching to test.server.distributive namespace" "(clojure.core/in-ns 'test.server.distributive)" "(is (\= \\r\\n                 (count\\r\\n                     (xml-> test.server.distributive/data1 \:servers \:server \:app_server \:domain \:instance))\\r\\n                 2))" "(is (\= \\r\\n                 (count\\r\\n                     (xml-> test.server.distributive/data1 \:servers \:server \:app_server \:domain \:instance))\\r\\n                 3))" "(testing \\"asdfadf\\"\\n(is (\= \\r\\n                 (count\\r\\n                     (xml-> test.server.distributive/data1 \:servers \:server \:app_server \:domain \:instance))\\r\\n                 3)))" "(deftest test-loc-to-instance\\n  (testing \\"instance count\\"\\n           (is (\= \\n                 (count\\n                     (xml-> data1 \:servers \:server \:app_server \:domain \:instance))\\n                 3))))" ";; Switching to test.server.distributive namespace" "(clojure.core/in-ns 'test.server.distributive)" "(test-loc-to-instance)" ";; Switching to test.server.distributive namespace" "(clojure.core/in-ns 'test.server.distributive)" "(test-loc-to-instance)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test-loc-to-instance)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'test.server.distributive)))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test-loc-to-instance)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test-loc-to-instance)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test-loc-to-instance)" "(xml-> data1 \:servers \:server \:app_server \:domain \:instance)" "((xml-> data1 \:servers \:server \:app_server \:domain \:instance) 0)" "(get (xml-> data1 \:servers \:server \:app_server \:domain \:instance) 0)" "(get (xml-> data1 \:servers \:server \:app_server \:domain \:instance) 1)" "(seq?(xml-> data1 \:servers \:server \:app_server \:domain \:instance) )" "(first (xml-> data1 \:servers \:server \:app_server \:domain \:instance) )" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test-loc-to-instance)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test-loc-to-instance)" "(loc-to-instance\\r\\n                   (first\\r\\n                     (xml-> data1 \:servers \:server \:app_server \:domain \:instance)))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(loc-to-instance\\r\\n                   (first\\r\\n                     (xml-> data1 \:servers \:server \:app_server \:domain \:instance)))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(loc-to-instance\\r\\n                   (first\\r\\n                     (xml-> data1 \:servers \:server \:app_server \:domain \:instance)))" "(test-loc-to-instance)" "(loc-to-instance\\r\\n                   (first\\r\\n                     (xml-> data1 \:servers \:server \:app_server \:domain \:instance)))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(loc-to-instance\\r\\n                   (first\\r\\n                     (xml-> data1 \:servers \:server \:app_server \:domain \:instance)))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(loc-to-instance\\r\\n                   (first\\r\\n                     (xml-> data1 \:servers \:server \:app_server \:domain \:instance)))" "(test-loc-to-instance)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test-loc-to-instance)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test-loc-to)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(test-loc-to)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test-loc-to)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test-loc-to)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test-loc-to)" "(first\\r\\n                     (xml-> data1 \:servers \:server \:app_server))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(test-loc-to)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(test-loc-to)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test-loc-to)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(test-loc-to)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test-loc-to)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test-loc-to)" "(clojure.string/split \\"test1\:test2\\" \\"\:\\")" "(clojure.string/split \\"test1\:test2\\" r\\"\:\\")" "(clojure.string/split \\"test1\:test2\\" re\\"\:\\")" "(clojure.string/split \\"test1\:test2\\" \#\\"\:\\")" "(clojure.string/split nil \#\\"\:\\")" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'server.distributive)))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" ";; Switching to server.distributive namespace" "(clojure.core/in-ns 'server.distributive)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" ";; Switching to test.server.distributive namespace" "(clojure.core/in-ns 'test.server.distributive)" "(test-loc-to)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(test-loc-to)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test-loc-to)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test-loc-to)" "(first\\r\\n                     (xml-> data1 \:services \:service \:component \:assembly))" "(first\\r\\n                     (xml-> data1 \:services \:service \:component))" "(first\\r\\n                     (xml-> data1 \:services \:service))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(first\\r\\n                     (xml-> data1 \:services \:service))" "(test-loc-to)" "(first\\r\\n                     (xml-> data1 \:services \:service \:component \:assembly))" "(first\\r\\n                     (xml-> data1 \:services \:service \:component))" "(first\\r\\n                     (xml-> data1 \:services \:service))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test-loc-to)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test-loc-to)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test-loc-to)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(test-loc-to)" "\#server.distributive/split" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(test-loc-to)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(test-loc-to)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(test-loc-to)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test-loc-to)" "(first\\r\\n                     (xml-> data1 \:services \:service \:server \:component))" "(zip/up\\n(first\\n  (xml-> data1 \:services \:service \:server \:component)))" "(zip/node (zip/up\\n(first\\n  (xml-> data1 \:services \:service \:server \:component))))" "(\:attrs \\n(zip/node (zip/up\\n(first\\n  (xml-> data1 \:services \:service \:server \:component)))))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(test-loc-to)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(test-loc-to)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(test-loc-to)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(test-loc-to)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(test-loc-to)" "(loc-to-assembly\\r\\n                   (first\\r\\n                     (xml-> data1 \:services \:service \:server \:component \:assembly)))" "(\=\\r\\n                 (loc-to-assembly\\r\\n                   (first\\r\\n                     (xml-> data1 \:services \:service \:server \:component \:assembly)))\\r\\n                 (struct-map\\r\\n                   Assembly\\r\\n                   \:classifier \\"bin\\"))" ";; Switching to test.server.distributive namespace" "(clojure.core/in-ns 'test.server.distributive)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(loc-to-assembly\\r\\n                   (first\\r\\n                     (xml-> data1 \:services \:service \:server \:component \:assembly)))" "(loc-to-component\\r\\n                   (first\\r\\n                     (xml-> data1 \:services \:service \:server \:component)))" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(loc-to-component\\r\\n                   (first\\r\\n                     (xml-> data1 \:services \:service \:server \:component)))" "(test-loc-to)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\test\\\\server\\\\distributive.clj" "(test-loc-to)" ";; Loading file D\:\\\\Projects\\\\clojure-build-farm\\\\src\\\\server\\\\distributive.clj" "(test-loc-to)"]
eclipse.preferences.version=1
